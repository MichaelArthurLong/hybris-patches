From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Franz-Josef Haider <franz.haider@jolla.com>
Date: Wed, 6 Jun 2018 09:33:03 +0200
Subject: [PATCH] (hybris) disable the usage of libprocessgroup, since it is
 incompatible.

Change-Id: Ie37ac0dcc5cabbf33de55c148009fdfff3e90c64
---
 init/Android.bp  |  3 ---
 init/init.cpp    |  2 --
 init/service.cpp | 19 ++++++++++++++++---
 3 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/init/Android.bp b/init/Android.bp
index 377a3740c4d2b8e88f7f57320693f6d9150c9d07..90cc1b57641e704bddefe623a798180b43d316f2 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -84,8 +84,6 @@ cc_defaults {
         "liblog",
         "liblogwrap",
         "liblp",
-        "libprocessgroup",
-        "libprocessgroup_setup",
         "libselinux",
         "libutils",
     ],
@@ -249,7 +247,6 @@ cc_binary {
     shared_libs: [
         "libprotobuf-cpp-lite",
         "libhidl-gen-utils",
-        "libprocessgroup",
         "liblog",
         "libcutils",
     ],
diff --git a/init/init.cpp b/init/init.cpp
index 599228c44ca0334f8418e9132821e09ea8da1bd3..eb2e87a6ad10fb931fa2ebee43f3128d2c4718dc 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -46,8 +46,6 @@
 #include <keyutils.h>
 #include <libavb/libavb.h>
 #include <libgsi/libgsi.h>
-#include <processgroup/processgroup.h>
-#include <processgroup/setup.h>
 #include <selinux/android.h>
 
 #ifndef RECOVERY
diff --git a/init/service.cpp b/init/service.cpp
index 156711873a482eb8bdf706c2ffed9031c8e3c713..cf4719382773694d147032de59a9d8ca18b53254 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -38,7 +38,6 @@
 #include <android-base/strings.h>
 #include <android-base/unique_fd.h>
 #include <hidl-util/FQName.h>
-#include <processgroup/processgroup.h>
 #include <selinux/selinux.h>
 #include <system/thread_defs.h>
 
@@ -277,7 +276,13 @@ void Service::KillProcessGroup(int signal) {
     // These functions handle their own logging, so no additional logging is needed.
     if (!process_cgroup_empty_) {
         LOG(INFO) << "Sending signal " << signal << " to service '" << name_ << "' (pid " << pid_
-                  << ") process group...";
+                  << ") process group... HYBRIS: killing PID instead of process group.";
+
+        kill(pid_, signal);
+
+// hybris: TODO?
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
         int r;
         if (signal == SIGTERM) {
             r = killProcessGroupOnce(uid_, pid_, signal);
@@ -286,6 +291,8 @@ void Service::KillProcessGroup(int signal) {
         }
 
         if (r == 0) process_cgroup_empty_ = true;
+#endif
+        process_cgroup_empty_ = true;
     }
 }
 
@@ -1018,6 +1025,7 @@ Result<Success> Service::Start() {
         std::for_each(descriptors_.begin(), descriptors_.end(),
                       std::bind(&DescriptorInfo::CreateAndPublish, std::placeholders::_1, scon));
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
         // See if there were "writepid" instructions to write to files under cpuset path.
         std::string cpuset_path;
         if (CgroupGetControllerPath("cpuset", &cpuset_path)) {
@@ -1075,6 +1083,7 @@ Result<Success> Service::Start() {
             PLOG(ERROR) << "cannot execve('" << args_[0] << "')";
         }
 
+#endif
         _exit(127);
     }
 
@@ -1097,8 +1106,11 @@ Result<Success> Service::Start() {
     start_order_ = next_start_order_++;
     process_cgroup_empty_ = false;
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     bool use_memcg = swappiness_ != -1 || soft_limit_in_bytes_ != -1 || limit_in_bytes_ != -1 ||
                       limit_percent_ != -1 || !limit_property_.empty();
+
+
     errno = -createProcessGroup(uid_, pid_, use_memcg);
     if (errno != 0) {
         PLOG(ERROR) << "createProcessGroup(" << uid_ << ", " << pid_ << ") failed for service '"
@@ -1143,7 +1155,8 @@ Result<Success> Service::Start() {
             }
         }
     }
-
+#endif
+    
     NotifyStateChange("running");
     return Success();
 }

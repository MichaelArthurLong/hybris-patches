From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Franz-Josef Haider <franz.haider@jolla.com>
Date: Wed, 6 Jun 2018 09:33:03 +0200
Subject: [PATCH] (hybris) disable the usage of libprocessgroup, since it is
 incompatible.

Change-Id: Ie37ac0dcc5cabbf33de55c148009fdfff3e90c64
---
 init/Android.bp  |  4 ----
 init/init.cpp    |  2 --
 init/service.cpp | 15 +++++++++++++--
 3 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/init/Android.bp b/init/Android.bp
index f292d689fb5cf67fa262b67aa96ffb90346d0dfb..bd1cd384ef2e336b5879a0fc5a72ddcea7497f9d 100644
--- a/init/Android.bp
+++ b/init/Android.bp
@@ -154,8 +154,6 @@ cc_defaults {
         "liblog",
         "liblogwrap",
         "liblp",
-        "libprocessgroup",
-        "libprocessgroup_setup",
         "libselinux",
         "libutils",
     ],
@@ -290,7 +288,6 @@ cc_defaults {
         "libselinux",
         "libhidl-gen-utils",
         "liblog",
-        "libprocessgroup",
         "libprotobuf-cpp-lite",
     ],
 }
@@ -349,7 +346,6 @@ cc_binary {
         "libhidl-gen-utils",
         "libhidlmetadata",
         "liblog",
-        "libprocessgroup",
         "libprotobuf-cpp-lite",
     ],
     srcs: init_common_sources + init_host_sources,
diff --git a/init/init.cpp b/init/init.cpp
index 20c17f59b544d52d36361dd444aa7b5f1ad492fe..528d3169675f018980dfbf88bb535df279ce4cf7 100644
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -51,8 +51,6 @@
 #include <keyutils.h>
 #include <libavb/libavb.h>
 #include <libgsi/libgsi.h>
-#include <processgroup/processgroup.h>
-#include <processgroup/setup.h>
 #include <selinux/android.h>
 
 #include "action_parser.h"
diff --git a/init/service.cpp b/init/service.cpp
index 7f4a184634b8b51bed8c7bc11ba2546dd07e8f01..344ac727b15f4ad7862ea7c3365dde74005cfdc3 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -33,7 +33,6 @@
 #include <android-base/stringprintf.h>
 #include <android-base/strings.h>
 #include <cutils/sockets.h>
-#include <processgroup/processgroup.h>
 #include <selinux/selinux.h>
 
 #include "lmkd_service.h"
@@ -203,7 +202,13 @@ void Service::KillProcessGroup(int signal, bool report_oneshot) {
     // These functions handle their own logging, so no additional logging is needed.
     if (!process_cgroup_empty_) {
         LOG(INFO) << "Sending signal " << signal << " to service '" << name_ << "' (pid " << pid_
-                  << ") process group...";
+                  << ") process group... HYBRIS: killing PID instead of process group.";
+
+        kill(pid_, signal);
+
+// hybris: TODO?
+#if DISABLED_FOR_HYBRIS_SUPPORT
+
         int max_processes = 0;
         int r;
         if (signal == SIGTERM) {
@@ -221,6 +226,8 @@ void Service::KillProcessGroup(int signal, bool report_oneshot) {
         }
 
         if (r == 0) process_cgroup_empty_ = true;
+#endif
+        process_cgroup_empty_ = true;
     }
 
     if (oom_score_adjust_ != DEFAULT_OOM_SCORE_ADJUST) {
@@ -525,6 +532,7 @@ Result<void> Service::Start() {
             descriptor.Publish();
         }
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
         if (auto result = WritePidToFiles(&writepid_files_); !result.ok()) {
             LOG(ERROR) << "failed to write pid to files: " << result.error();
         }
@@ -542,6 +550,7 @@ Result<void> Service::Start() {
                         << "'). See the 'Debugging init' section of init's README.md for tips";
         }
 
+#endif
         _exit(127);
     }
 
@@ -564,6 +573,7 @@ Result<void> Service::Start() {
     start_order_ = next_start_order_++;
     process_cgroup_empty_ = false;
 
+#if DISABLED_FOR_HYBRIS_SUPPORT
     bool use_memcg = swappiness_ != -1 || soft_limit_in_bytes_ != -1 || limit_in_bytes_ != -1 ||
                       limit_percent_ != -1 || !limit_property_.empty();
     errno = -createProcessGroup(proc_attr_.uid, pid_, use_memcg);
@@ -614,6 +624,7 @@ Result<void> Service::Start() {
     if (oom_score_adjust_ != DEFAULT_OOM_SCORE_ADJUST) {
         LmkdRegister(name_, proc_attr_.uid, pid_, oom_score_adjust_);
     }
+#endif
 
     NotifyStateChange("running");
     reboot_on_failure.Disable();

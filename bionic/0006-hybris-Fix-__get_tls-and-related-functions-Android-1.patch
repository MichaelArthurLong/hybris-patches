From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Franz-Josef Haider <franz.haider@jolla.com>
Date: Thu, 8 Oct 2020 14:43:42 +0000
Subject: [PATCH] (hybris) Fix __get_tls and related functions (>=Android 10)

Signed-off-by: Simonas Leleiva <simonas.leleiva@jolla.com>
Change-Id: I24486873be638a1a8cd123705ba2e51ec7414b94
---
 libc/Android.bp                   |  1 +
 libc/bionic/ndk_cruft.cpp         | 13 ++++----
 libc/hybris_support.c             |  4 +++
 libc/libc.map.txt                 |  1 +
 libc/private/__get_tls.h          | 31 +++++++-----------
 libc/private/__get_tls_internal.h | 54 +++++++++++++++++++++++++++++++
 6 files changed, 79 insertions(+), 25 deletions(-)
 create mode 100644 libc/hybris_support.c
 create mode 100644 libc/private/__get_tls_internal.h

diff --git a/libc/Android.bp b/libc/Android.bp
index a5990288d212751c136ed1060208a6cde0859f93..85e03f4a21dba3f330b61a41b92870a34a2c233b 100644
--- a/libc/Android.bp
+++ b/libc/Android.bp
@@ -18,6 +18,7 @@ libc_common_src_files = [
     "stdio/vfscanf.cpp",
     "stdio/vfwscanf.c",
     "stdlib/exit.c",
+    "hybris_support.c",
 ]
 
 // Various kinds of cruft.
diff --git a/libc/bionic/ndk_cruft.cpp b/libc/bionic/ndk_cruft.cpp
index 2c3299f7b8e45b184ea5913122ae3b1cd969aa02..85626db4a838068639bdc0e7cee3400ea40dd36a 100644
--- a/libc/bionic/ndk_cruft.cpp
+++ b/libc/bionic/ndk_cruft.cpp
@@ -49,6 +49,13 @@
 
 extern "C" {
 
+// TODO: does anything still need this?
+// with hybris we need it, so thanks for keeping it.
+void** __get_tls() {
+#include "private/__get_tls_internal.h"
+    return __get_tls_internal();
+}
+
 // LP64 doesn't need to support any legacy cruft.
 #if !defined(__LP64__)
 
@@ -70,12 +77,6 @@ int __open() {
   abort();
 }
 
-// TODO: does anything still need this?
-void** __get_tls() {
-#include "private/__get_tls.h"
-  return __get_tls();
-}
-
 // This non-standard function was in our <string.h> for some reason.
 void memswap(void* m1, void* m2, size_t n) {
   char* p = reinterpret_cast<char*>(m1);
diff --git a/libc/hybris_support.c b/libc/hybris_support.c
new file mode 100644
index 0000000000000000000000000000000000000000..9252530211b64d6115c7f930fc32d08937d008fc
--- /dev/null
+++ b/libc/hybris_support.c
@@ -0,0 +1,4 @@
+void** __get_tls_hooks(void) {
+#include "private/__get_tls_internal.h"
+  return __get_tls_internal();
+}
diff --git a/libc/libc.map.txt b/libc/libc.map.txt
index 88192239a1ace8e4a5068720fbdbbcc6b6f0fa8a..941faadf8082650d33ea634351f56639658703d2 100644
--- a/libc/libc.map.txt
+++ b/libc/libc.map.txt
@@ -40,6 +40,7 @@ LIBC {
     __fsetlocking; # introduced=23
     __fstatfs64; # arm x86 mips
     __fwritable; # introduced=23
+    __get_tls_hooks; # arm arm64 x86 mips introduced=21
     __get_h_errno;
     __getcpu; # arm x86 mips introduced-arm=12 introduced-mips=16 introduced-x86=12
     __getcwd; # arm x86 mips
diff --git a/libc/private/__get_tls.h b/libc/private/__get_tls.h
index 04c5fdbbf15ad6b63e4755d700c7d36fad53f37f..6a4b5728e088857f4b5696e197a5893521e6b8b1 100644
--- a/libc/private/__get_tls.h
+++ b/libc/private/__get_tls.h
@@ -29,25 +29,18 @@
 #ifndef __BIONIC_PRIVATE_GET_TLS_H_
 #define __BIONIC_PRIVATE_GET_TLS_H_
 
-#if defined(__aarch64__)
-# define __get_tls() ({ void** __val; __asm__("mrs %0, tpidr_el0" : "=r"(__val)); __val; })
-#elif defined(__arm__)
-# define __get_tls() ({ void** __val; __asm__("mrc p15, 0, %0, c13, c0, 3" : "=r"(__val)); __val; })
-#elif defined(__mips__)
-# define __get_tls() \
-    /* On mips32r1, this goes via a kernel illegal instruction trap that's optimized for v1. */ \
-    ({ register void** __val asm("v1"); \
-       __asm__(".set    push\n" \
-               ".set    mips32r2\n" \
-               "rdhwr   %0,$29\n" \
-               ".set    pop\n" : "=r"(__val)); \
-       __val; })
-#elif defined(__i386__)
-# define __get_tls() ({ void** __val; __asm__("movl %%gs:0, %0" : "=r"(__val)); __val; })
-#elif defined(__x86_64__)
-# define __get_tls() ({ void** __val; __asm__("mov %%fs:0, %0" : "=r"(__val)); __val; })
-#else
-#error unsupported architecture
+#ifdef __cplusplus
+extern "C" {
 #endif
+void **__get_tls(void);
+void **__get_tls_hooks(void);
+#ifdef __cplusplus
+}
+#endif
+
+#include "__get_tls_internal.h"
+
+//#define __get_tls __get_tls_hooks
+
 
 #endif /* __BIONIC_PRIVATE_GET_TLS_H_ */
diff --git a/libc/private/__get_tls_internal.h b/libc/private/__get_tls_internal.h
new file mode 100644
index 0000000000000000000000000000000000000000..4a8fa5fc20d522cc39c9840176b42df6d799d4cf
--- /dev/null
+++ b/libc/private/__get_tls_internal.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *  * Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#ifndef __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_
+#define __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_
+
+#if defined(__aarch64__)
+# define __get_tls_internal() ({ void** __val; __asm__("mrs %0, tpidr_el0" : "=r"(__val)); __val; })
+#elif defined(__arm__)
+# define __get_tls_internal() ({ void** __val; __asm__("mrc p15, 0, %0, c13, c0, 3" : "=r"(__val)); __val; })
+#elif defined(__mips__)
+# define __get_tls_internal() \
+    /* On mips32r1, this goes via a kernel illegal instruction trap that's optimized for v1. */ \
+    ({ register void** __val asm("v1"); \
+       __asm__(".set    push\n" \
+               ".set    mips32r2\n" \
+               "rdhwr   %0,$29\n" \
+               ".set    pop\n" : "=r"(__val)); \
+       __val; })
+#elif defined(__i386__)
+# define __get_tls_internal() ({ void** __val; __asm__("movl %%gs:0, %0" : "=r"(__val)); __val; })
+#elif defined(__x86_64__)
+# define __get_tls_internal() ({ void** __val; __asm__("mov %%fs:0, %0" : "=r"(__val)); __val; })
+#else
+#error unsupported architecture
+#endif
+
+#endif /* __BIONIC_PRIVATE_GET_TLS_INTERNAL_H_ */
+
